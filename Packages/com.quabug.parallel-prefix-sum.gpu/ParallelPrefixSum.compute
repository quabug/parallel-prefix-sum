#define THREAD_SIZE 256

StructuredBuffer<int> Numbers;
RWStructuredBuffer<int> Sums;
RWStructuredBuffer<int> GroupSums;
uint Count;

groupshared int _sumBuffer[THREAD_SIZE * 2]; // double buffer

#pragma kernel PrefixSum
[numthreads(THREAD_SIZE,1,1)]
void PrefixSum(uint3 dispatchThreadId : SV_DispatchThreadID, uint3 groupThreadId : SV_GroupThreadID, uint groupId : SV_GroupID)
{
    const uint localId = groupThreadId.x;
    const uint id = dispatchThreadId.x;

    uint inBegin = THREAD_SIZE;
    uint outBegin = 0;
    _sumBuffer[localId] = Numbers[id];
    GroupMemoryBarrierWithGroupSync();
    
    [unroll]
    for (uint offset = 1; offset < THREAD_SIZE; offset <<= 1)
    {
        // swap
        const uint temp = inBegin;
        inBegin = outBegin;
        outBegin = temp;
    
        uint inIndex = inBegin + localId;
        uint outIndex = outBegin + localId;
        if (localId < offset) _sumBuffer[outIndex] = _sumBuffer[inIndex];
        else _sumBuffer[outIndex] = _sumBuffer[inIndex] + _sumBuffer[inIndex - offset];
        GroupMemoryBarrierWithGroupSync();
    }
    
    if (id >= Count) return;
    const int sum = _sumBuffer[outBegin + localId];
    if (localId == THREAD_SIZE - 1) GroupSums[groupId] = sum;
    Sums[id] = sum;
}

#pragma kernel AddGroupSum
[numthreads(THREAD_SIZE,1,1)]
void AddGroupSum(uint3 id : SV_DispatchThreadID, uint groupId : SV_GroupID)
{
    if (id.x >= Count || groupId == 0) return;
    Sums[id.x] += GroupSums[groupId-1];
}
